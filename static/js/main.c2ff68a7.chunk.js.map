{"version":3,"sources":["ToDos.js","AddToDo.js","App.js","serviceWorker.js","index.js"],"names":["ToDos","todos","deleteTodo","todoList","length","map","item","className","key","id","onClick","task","AddToDo","props","handleChange","e","setState","content","target","value","handleSubmit","preventDefault","addToDo","state","onSubmit","this","htmlFor","type","onChange","React","Component","App","todos1","filter","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOA4BeA,MA1Bf,YAAuC,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WAEdC,EAAWF,EAAMG,OACnBH,EAAMI,KACF,SAACC,GACG,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,GAAIC,QAAS,kBAAIR,EAAWI,EAAKG,MACxE,8BAAOH,EAAKG,IADhB,IAGI,8BAAOH,EAAKK,UAMxB,uBAAGJ,UAAU,UAAb,+CAGR,OACI,yBAAKA,UAAU,oBACVJ,ICeES,E,YAjCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAMVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,QAASF,EAAEG,OAAOC,SATP,EAanBC,aAAe,SAACL,GACZA,EAAEM,iBACF,EAAKR,MAAMS,QAAQ,EAAKC,MAAMN,SAC9B,EAAKD,SAAS,CAAEC,QAAS,MAdzB,EAAKM,MAAQ,CACTN,QAAS,IAHE,E,sEAoBf,OACI,6BACI,0BAAMO,SAAUC,KAAKL,cACjB,2BAAOM,QAAQ,QAAf,yBACA,2BAAOC,KAAK,OAAOlB,GAAG,OAAOmB,SAAUH,KAAKX,aAAcK,MAAOM,KAAKF,MAAMN,UAC5E,4BAAQU,KAAK,UAAb,e,GA3BEE,IAAMC,WC0CbC,E,YArCb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KASRX,WAAa,SAACO,GACZ,IAAIuB,EAAS,EAAKT,MAAMtB,MAAMgC,QAAO,SAAC3B,GACpC,OAAOA,EAAKG,KAAOA,KAErB,EAAKO,SAAS,CAAEf,MAAO+B,KAdN,EAiBnBV,QAAU,SAACX,GACT,IAAIL,EAAO,CACTG,GAAK,EAAKc,MAAMtB,MAAMG,OAAO,EAC7BO,KAAOA,GAGT,EAAKK,SAAS,CAAEf,MAAO,EAAKsB,MAAMtB,MAAMiC,OAAO,CAAC5B,OArBhD,EAAKiB,MAAQ,CACXtB,MAAO,CACL,CAAEQ,GAAI,EAAGE,KAAM,kBACf,CAAEF,GAAI,EAAGE,KAAM,yBALF,E,sEA2BjB,OACE,yBAAKJ,UAAU,iBACb,8CACA,kBAAC,EAAD,CAAON,MAAOwB,KAAKF,MAAMtB,MAAOC,WAAYuB,KAAKvB,aACjD,kBAAC,EAAD,CAASoB,QAASG,KAAKH,e,GAjCbO,IAAMC,WCOJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c2ff68a7.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ToDos({ todos, deleteTodo }) {\n\n    const todoList = todos.length ? (\n        todos.map(\n            (item) => {\n                return (\n                    <div className=\"collection-item\" key={item.id} onClick={()=>deleteTodo(item.id)}>\n                        <span>{item.id}</span>\n                        . \n                        <span>{item.task}</span>\n                    </div>\n                );\n            }\n        )\n    ) : (\n            <p className=\"center\"> No Todos to work on! what are you doing?! </p>\n        );\n\n    return (\n        <div className=\"todos collection\">\n            {todoList}\n        </div>\n    );\n\n};\n\nexport default ToDos;","import React from 'react';\n\nclass AddToDo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: ''\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            content: e.target.value\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addToDo(this.state.content);\n        this.setState({ content: '' });\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"task\"> write new task here </label>\n                    <input type=\"text\" id=\"task\" onChange={this.handleChange} value={this.state.content} />\n                    <button type=\"submit\"> Add </button>\n                </form>\n            </div>\n        );\n    }\n\n}\n\nexport default AddToDo;","import React from 'react';\nimport './App.css';\nimport ToDos from './ToDos';\nimport AddToDo from './AddToDo';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        { id: 1, task: \"To Learn React\" },\n        { id: 2, task: \"Learn it damn well!\" }\n      ]\n    };\n  }\n\n  deleteTodo = (id) => {\n    let todos1 = this.state.todos.filter((item) => {\n      return item.id !== id;\n    });\n    this.setState({ todos: todos1 });\n  }\n\n  addToDo = (task) => {\n    let item = {\n      id : this.state.todos.length+1,\n      task : task\n    }\n    \n    this.setState({ todos: this.state.todos.concat([item]) });\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1> Things To Do </h1>\n        <ToDos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <AddToDo addToDo={this.addToDo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}